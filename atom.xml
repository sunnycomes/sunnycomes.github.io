<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I/O View]]></title>
  <link href="http://www.iovi.com/atom.xml" rel="self"/>
  <link href="http://www.iovi.com/"/>
  <updated>2014-01-01T10:35:44+08:00</updated>
  <id>http://www.iovi.com/</id>
  <author>
    <name><![CDATA[Sunny]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java Performance Tuning Tips]]></title>
    <link href="http://www.iovi.com/blog/2013/12/11/java-performance-tunning-tips/"/>
    <updated>2013-12-11T20:59:44+08:00</updated>
    <id>http://www.iovi.com/blog/2013/12/11/java-performance-tunning-tips</id>
    <content type="html"><![CDATA[<p>The first version is completed on 2013.12.10 21:55, the main content is from <a href="http://www.exforsys.com/tutorials/j2ee/performance-tuning-of-java-applications.html">here</a>, thanks to the origin author.</p>

<p>Ever since the first version of Java Technology hit the streets, performance has been an important issue for Java developers. Java has improved dramatically and continually but, performance tuning is very essential to get the best results, especially when we think of J2EE applications.</p>

<!-- more -->


<h2>Introduction:</h2>

<p>Java Performance Tuning (abbreviated as JPT), 2nd edition provides a comprehensive guide to eliminate all the types of performance problems. By considering real-life examples JPT shows how to get rid off all the types of performances problems. For example JPT shows tricks such as how to minimize object creation and replacing strings with arrays can really pay off in improving code performance.</p>

<p>Few of important fundamentals and guidelines included in Java Performance Tuning are:</p>

<ul>
<li>Tuning tips for object creation.</li>
<li>Tuning in JDBC.</li>
<li>Web services performance tips.</li>
<li>Tuning in EJB.</li>
<li>Tuning in J2EE.</li>
<li>Tuning in JMS.</li>
<li>Tuning in RMI.</li>
</ul>


<p>Guidelines for tuning java code without destroying program&rsquo;s skeleton is efficiently presented in second edition of Java Performance Tuning. It includes how to use threads effectively, how to optimize the use of strings, minimizing the creation of objects in program, avoiding bottleneck operation by including all the important fundamentals of Software Engineering to re-pioneer the code, issues of speed of Servlets and JSPs etc. That provides very crucial guidelines in performance tuning for java developers.</p>

<h2>Tuning Tips for Object Creation:</h2>

<p>Object Creation is one of the most basic and essential thing while developing a Java Application, as such; object defines the physical reality of class. Pay proper attention while declaring class&#8217; methods and variables because careless work carried out at this stage, can cost you in terms of speed and performance because variables and methods unwontedly declared and initialize can create overhead in overall speed. Object should always be created early when there is spare time in the application, object once created should be in hold position until it is required. Care should be taken while defining methods that can accept the reusable objects to be filled with the data rather than methods that return objects holding that data, immutable objects can also be used here. Object should be created only when class logically needs. Constructor of class should always be simple. Methods that alter objects directly should always be preferred. Use classes that handle primitive data types rather than wrapping the primitive data types.</p>

<h2>Performance Tuning in JDBC:</h2>

<p>Java Database Connectivity (JDBC) is mainly used in most of the Java application. To keep trace on performance tuning in JDBC becomes very crucial and prime issue when Java developer realizes that most of the processing time should not be wasted behind data processing over the network. More details are <a href="http://www.iovi.com/blog/2013/10/31/basic-practical-usage-of-jdbc-api/">here</a></p>

<p>Here are few of the tuning tips for JDBC that can improve the over all performance in Java application.</p>

<ul>
<li>SQL statements should be tuned to minimize the data that is return from the database.</li>
<li>Use of prepared statements and parameterized SQL statements can speed up the over all process in data processing.</li>
<li>Transaction conflicts should always be avoided.</li>
<li>Usage of stored procedures, connection pooling, selection of fastest JDBC driver should be encouraged.</li>
<li>Any of the open resources that is not in use in Java application can keep processor engaged unwontedly, any of the resource that is open and not required to perform any of database activity should be closed like Connections, Statements, ResultSet etc.</li>
</ul>


<h2>Web Services performance tips:</h2>

<p>Because of Java&rsquo;s outstanding performance in web services there are few of the performance tips that are to be considered while developing a web service application. Here are few of the tips given for improving the web services performance.</p>

<ul>
<li>Avoid using XML messaging, this helps to achieve fine-grained RPC.</li>
<li>Frequency of the messaging should be taken into consideration with the replication of the data as necessary.</li>
<li>Always try to retrieve data during off-hours this helps in course gained transactions.</li>
<li>Overall system performance should never be neglected and optimized until we know where the bottlenecks are present.</li>
<li>Asynchronous messaging model should always be taken into account when transport is slow or / and unreliable, or when processing is complex and long running.</li>
</ul>


<h2>Tips for Quality of services for Web Services</h2>

<p>The main requirements in quality of service for web services are:</p>

<ul>
<li>Availability and accessibility.</li>
<li>Integrity and reliability. This ensures that weather program will crash or not while it is running, if so, how often can it crash.</li>
<li>Number of simultaneous request that can be made to application by the user i.e. &ldquo;throughput&rdquo; and what will be the response time to process this request by application i.e. &ldquo;latency&rdquo;.</li>
<li>Security issues.</li>
<li>HTTP is a best-effort delivery service as far as web services issue is concerned. The main reason behind this is that request could simply be dropped. Messaging in web services should always be Asynchronous because Asynchronous messaging can improve throughput no matter at the cost of latency.</li>
<li>DOM based parsers are slower than SAX based ones.</li>
<li>Requests results should be cached whenever it is possible.</li>
<li>Extreme care should be taken to make sure that resources are not locked for long periods of time to avoid serious scalability problems.</li>
</ul>


<p>Other factor that affects web service performance are:</p>

<ul>
<li>Response time of web server.</li>
<li>Availability of web server.</li>
<li>Execution time of web application.</li>
<li>Backend database.</li>
<li>Scaling web services Tips</li>
</ul>


<p>Use of faster communication protocol, like plain socket, should always be preferred. Whenever there is requirement of sending large number of documents over the network, basic load-balancing scheme should be achieved, all the documents to be sent should have different URL hosts i.e. binding addresses. For scalability of server better and speedy hardware should be preferred though there is limitation of scalability of server,  that most application performance does not scale linearly with increases in the hardware power. Most of the times in web related services cluster of more than one server is used.</p>

<h2>Performance Tuning tips for EJB:</h2>

<p>While developing an EJB application if EJB services for an object is not required than plain Java object should be replaced in place of EJB object. Multiple remote method calls should be changed into one remote method call with all the data combined into a parameter object to enhance the overall process. There should be proper tuning in EJB Server thread count; Use Stateless session beans pool size to minimize the creation and destruction of the beans. When multiple EJB remote calls have to be changed into one session bean remote call and several local calls(SessionFacade), wrap multiple entity beans in a session bean. Transactional time-out should be set previously. Use HttpSession object rather than Stateful session bean to maintain client state. Bulk updating should be used to reduce the overall database calls to fetch and retrieving the data. When dealing with large amounts of data such as searching large database JDBC should be directly used rather than using entity beans.</p>

<h2>J2EE Performance tuning tips:</h2>

<p>Here few of the important tuning tips for J2EE in points.</p>

<ul>
<li>Entity beans from session beans should always be accessed.</li>
<li>When you no longer need to use session call HttpSession.invalidate() to clean up a session.</li>
<li>Save resources by turning off automatic session creation using <code>&lt; % @page session="false" % &gt;</code> for web pages that don&rsquo;t require session tracking.</li>
<li>Use compile time directive <code>&lt; % @include file="copyleft.html" % &gt;</code> where possible.</li>
<li>Whenever beans are co-located in the same JVM, use local entity beans.</li>
<li>Proprietary stubs can be used for caching and batching data.</li>
<li>To generate unique primary keys dedicated remote object should be used.</li>
<li>Whenever possible use cache tagging.</li>
<li>User JDBC directly instead of using an entity bean only for data access.</li>
</ul>


<h2>Tuning tips for JMS:</h2>

<p>For developing an efficient JMS application transient variables should be used to reduce serialization overheads. For receiving messages asynchronously implement MessageListener. To avoid persistency overhead choose non-durable (NON_PERSISTENT) messages wherever appropriate. It is practically efficient to use <code>DUPS_OK_ACKNOWLEDGE AND AUTO_ACKNOWLEDGE</code> than <code>CLIENT_ACKNOWLEDGE</code> as far as issue of performance is concerned. Separate transactional sessions and non-transactional sessions for transactional and non-transactional messages should be used separately. Because of the fact that &ldquo;a higher redelivery delay and lower redelivery limit reduces the overhead&rdquo; remember to tune the destination parameters. Open java resources can claim for more system resources never forget to close all the resources whenever they are not in use. The last point to be kept while developing a JMS application is that consumer should always start before we start the producer so that the initial messages do not need to be queued up.</p>

<h2>RMI tuning performance tips:</h2>

<p>To improve the performance in RMI application always consider altering the Tcp WindowSize parameter. To measure the bandwidth of network netp erf should be used. By setting the properties sun.rmi.dgc.client.gcInterval and sun.rmi.dgc.server.gcInterval RMI garbage collection should be configured in a proper manner. Since sending the object over network may consume much of the time in a big application sending groups of objects together rather than one object at a time is advisable. To speed up the transfers, implement Externalize interface. To handle special cases such as singleton or reusable objects use special codes. To improve overall development quality never try to add the extra complications once the performance target have been met.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Syntax Guide]]></title>
    <link href="http://www.iovi.com/blog/2013/11/30/simple-guide-for-markdown/"/>
    <updated>2013-11-30T21:35:48+08:00</updated>
    <id>http://www.iovi.com/blog/2013/11/30/simple-guide-for-markdown</id>
    <content type="html"><![CDATA[<p>This post is from <a href="http://sourceforge.net/p/forge/documentation/markdown_syntax/#md_ex_links" title="thanks to the origin author.">here</a>. Thanks to the origin author.
Markdown was created to be easy to read, easy to write, and still readable in plain text format.</p>

<ol>
<li><a href="#links">Links</a></li>
<li><a href="#reference_links">Reference Links</a></li>
<li><a href="#artifact_links">Artifact Links</a></li>
<li><a href="#basic_text_formatting">Basic Text Formatting</a></li>
<li><a href="#blockquotes">Blockquotes</a></li>
<li><a href="#preformatted_text">Preformatted Text</a></li>
<li><a href="#lists">Lists</a></li>
<li><a href="#tables">Tables</a>(We will talk about this feature)</li>
<li>Headers(Removed)</li>
<li><a href="#more_headers">More Headers</a></li>
<li><a href="#horizontal_rules">Horizontal Rules</a></li>
<li><a href="#images">Images</a></li>
<li>Videos(Removed)</li>
<li><a href="#escapes_and_html">Escapes and HTML</a></li>
<li>Table of Contents(Removed)</li>
<li><a href="#code_highlighting">Code Highlighting</a></li>
<li>Includes(Removed)</li>
<li>Neighborhood Notifications(Removed)</li>
<li>Project Info Macros(Removed)</li>
</ol>


<hr />

<h2><a name='links'></a>Links</h2>

<p>Most URLs will automatically be turned into links. To be explicit, just write it like this:</p>

<pre><code>&lt;http://someurl&gt;  
&lt;somebbob@example.com&gt;
</code></pre>

<p>Output:</p>

<!-- more -->


<blockquote><p><a href="http://someurl">http://someurl</a><br/>
<a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#115;&#x6f;&#109;&#x65;&#98;&#98;&#x6f;&#98;&#x40;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#115;&#111;&#109;&#101;&#98;&#x62;&#x6f;&#98;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a></p></blockquote>

<p>To use text for the link, write it:</p>

<pre><code>[like this](http://someurl)
</code></pre>

<p>You can add a <em>title</em> (which shows up under the cursor):</p>

<pre><code>[like this](http://someurl "this title shows up when you hover")
</code></pre>

<p>Output:</p>

<blockquote><p><a href="http://someurl">like this</a></p>

<p>You can add a <em>title</em> (which shows up under the cursor):</p>

<p><a href="http://someurl" title="this title shows up when you hover">like that</a></p></blockquote>

<hr />

<h2><a name='reference_links'></a>Reference Links</h2>

<pre><code>You can also put the [link URL][1] below the current paragraph like [this][2].  
[1]: http://url  
[2]: http://another.url "A funky title"  
</code></pre>

<p>Output:</p>

<blockquote><p>You can also put the <a href="http://url">link URL</a> below the current paragraph <a href="http://another.url" title="A funky title">like</a> this.</p></blockquote>

<p>Here the text &ldquo;link URL&rdquo; gets linked to &ldquo;<a href="http://url">http://url</a>&rdquo;, and the lines showing &ldquo;<a href="http://url">1</a>: <a href="http://url">http://url</a>&rdquo; won&rsquo;t show anything.</p>

<pre><code>[shortcut]: http://goes/with/the/link/name/text
</code></pre>

<p>Or you can use a <a href="http://goes/with/the/link/name/text">shortcut</a> reference, which links the text &ldquo;shortcut&rdquo; to the link named &ldquo;<a href="http://goes/with/the/link/name/text">shortcut</a>&rdquo; on the next paragraph.</p>

<p>Output:</p>

<blockquote><p>Or you can use a <a href="http://goes/with/the/link/name/text">shortcut</a> reference, which links the text &ldquo;shortcut&rdquo; to the link named &ldquo;<a href="http://goes/with/the/link/name/text">shortcut</a>&rdquo; on the next paragraph.</p></blockquote>

<hr />

<h2><a name='artifact_links'></a>Artifact Links</h2>

<p>Any forge resource (artifact) can be linked with surrounding square brackets, e.g.</p>

<pre><code>[MyPage] 
or 
[#123]. 
</code></pre>

<p>These artifact links can take several forms.</p>

<hr />

<h2><a name='simple_links'></a>Simple Links</h2>

<p>Most commonly, the artifact identifier can simply be surrounded with square brackets. Here are some examples:</p>

<pre><code>[MyWikiPage]       # Wiki - name of wiki page  
[#123]             # Tracker - ticket number  
[r10721]           # SVN - revision number  
[3b9d48]           # Git &amp; Mercurial - first 6 characters of revision hash  
[2012/02/my-post]  # Blog - post slug, including YYYY/MM/ prefix  
[a6d38f98]         # Discussion Thread - thread id  
[a6d38f98#42f8]    # Discussion Post - thread_id#post_id  
</code></pre>

<h3>Two-part Links</h3>

<p>To link to an artifact in a specific tool, use the form: <code>[tool:artifact]</code>, where <code>tool</code> is the name of the tool as it appears in the URL. Two-part links are useful when you have two tools of the same type installed. For example, let&rsquo;s say you have a &lsquo;bugs&rsquo; tracker and a &lsquo;features&rsquo; tracker installed, and you want to link to the first ticket in each:</p>

<pre><code>[bugs:#1]  
[features:#1]
</code></pre>

<h3>Three-part Links</h3>

<p>To link to an artifact in another project, use the form: <code>[project:tool:artifact]</code>, where <code>project</code> is the name of the project as it appears in the URL. For example:</p>

<pre><code>[allura:wiki:Home]
</code></pre>

<p>To link to an artifact in a subproject, use the form: <code>[project/subproject:tool:artifact]</code>, where <code>subproject</code> is the name of the subproject as it appears in the URL. For example:</p>

<pre><code>[allura/sub:code:3b9d48]
</code></pre>

<hr />

<h2><a name='basic_text_formatting'></a>Basic Text Formatting</h2>

<p>Use * or _ to emphasize things:</p>

<pre><code>*this is in italic*  and _so is this_  
**this is in bold**  and __so is this__  
***this is bold and italic***  and ___so is this___
</code></pre>

<p>Output:</p>

<blockquote><p><em>this is in italic</em>  and <em>so is this</em><br/>
<strong>this is in bold</strong>  and <strong>so is this</strong><br/>
<strong><em>this is bold and italic</em></strong>  and <strong><em>so is this</em></strong></p></blockquote>

<p>You can strike through text using HTML like this:</p>

<pre><code>&lt;s&gt;this is strike through text&lt;/s&gt;
</code></pre>

<p>Output:</p>

<blockquote><p><s>this is strike through text</s></p></blockquote>

<p>Two blank spaces at the end of the line do the same work as <br/> in <em>html</em>, making a line break. <em>(A little bit different from the origin post)</em>.<br/>
Two carriage returns make a new paragraph.</p>

<hr />

<h2><a name='blockquotes'></a>Blockquotes</h2>

<p>Use the > character in front of a line, just like in email</p>

<pre><code>&gt; Use it if you're quoting a person, a song or whatever.

&gt; You can use *italic* or lists inside them also.
And just like with other paragraphs,
all of these lines are still
part of the blockquote, even without the &gt; character in front.
</code></pre>

<p>To end the blockquote, just put a blank line before the following
paragraph.</p>

<p>Output:</p>

<blockquote><p>Use it if you&rsquo;re quoting a person, a song or whatever.</p>

<p>You can use italic or lists inside them also.
And just like with other paragraphs,
all of these lines are still
part of the blockquote, even without the > character in front.</p></blockquote>

<p>To end the blockquote, just put a blank line before the following paragraph.</p>

<hr />

<h2><a name='preformatted_text'></a>Preformatted Text</h2>

<p>If you want some text to show up exactly as you write it, without Markdown doing anything to it, just indent every line by at least 4 spaces (or 1 tab). As an alternative to indenting, you can use 4 or more tildes before and after the text. See examples in the Code Highlighting section(<em>xxxxx</em> at the head of line is a placeholder for one tab):</p>

<pre><code>This line won't *have any markdown* formatting applied.  
I can even write &lt;b&gt;HTML&lt;/b&gt; and it will show up as text.  
This is great for showing program source code, or HTML or even  
Markdown. &lt;b&gt;this won't show up as HTML&lt;/b&gt; but  
exactly &lt;i&gt;as you see it in this text file&lt;/i&gt;.  
</code></pre>

<p>Within a paragraph, you can use backquotes to do the same thing.<code>This won't be *italic* or **bold** at all.</code></p>

<p>Output:</p>

<blockquote><p>This line won&rsquo;t <em>have any markdown</em> formatting applied.<br/>
I can even write <b>HTML</b> and it will show up as text.<br/>
This is great for showing program source code, or HTML or even<br/>
Markdown. <b>this won&rsquo;t show up as HTML</b> but<br/>
exactly <i>as you see it in this text file</i>.</p></blockquote>

<p>Within a paragraph, you can use backquotes to do the same thing.<code>This won't be *italic* or **bold** at all.</code></p>

<h2><a name='lists'></a>Lists</h2>

<p>(Here is some place different from the origin counterpart, accutally not powerful as it described, and pay attention that the next line must be blank, even two blank spaces(break line) don&rsquo;t work.)</p>

<pre><code>* an asterisk starts an unordered list
* and this is another item in the list
+ or you can also use the + character
- or the - character
</code></pre>

<p>To start an ordered list, write this:</p>

<pre><code>1.this starts a list *with* numbers  
1. this will show as number "2."  
1. this will show as number "3."  
</code></pre>

<p>Output:</p>

<blockquote><ul>
<li>an asterisk starts an unordered list</li>
<li>and this is another item in the list</li>
<li>or you can also use the + character</li>
<li>or the &ndash; character</li>
</ul>
</blockquote>

<p>To start an ordered list, write this:</p>

<blockquote><ol>
<li>this starts a list <em>with</em> numbers</li>
<li>this will show as number &ldquo;2.&rdquo;</li>
<li>this will show as number &ldquo;3.&rdquo;</li>
</ol>
</blockquote>

<h3>Multi-level List###</h3>

<p>(Newly added, 2013.12.26 21:15)</p>

<pre><code>* First Level
 * Second Level, add one more space than first level
      * Third Level, add six more spaces than first level
</code></pre>

<p>Output:</p>

<blockquote><ul>
<li>First Level</li>
<li>Second Level, add one more space than first level

<ul>
<li> Third Level, add six more spaces than first level</li>
</ul>
</li>
</ul>
</blockquote>

<hr />

<h2><a name='tables'>Tables</h2>

<p>(We will talk about this feature later)</p>

<hr />

<h2><a name='more_headers'>More Headers</h2>

<p>More ways of doing headers:</p>

<pre><code># this is a huge header #  
## this is a smaller header ##  
### this is even smaller ###  
#### more small ####  
##### even smaller #####  
###### smallest still: `&lt;h6&gt;` header  
</code></pre>

<p>Output:</p>

<blockquote><h1>this is a huge header</h1>

<h2>this is a smaller header</h2>

<h3>this is even smaller</h3>

<h4>more small</h4>

<h5>even smaller</h5>

<h6>smallest still: <code>&lt;h6&gt;</code> header</h6></blockquote>

<p>You can use up to 6 # characters at the beginning of the line.</p>

<hr />

<h2><a name='horizontal_rule'></a>Horizontal Rule</h2>

<p>Just put three or more &ldquo;*&rdquo; or &ldquo;&ndash;&rdquo; on a line:</p>

<pre><code>----------------
</code></pre>

<p>Output:</p>

<blockquote><hr /></blockquote>

<p>Or, you can use single spaces between them, like this:</p>

<pre><code>* * *
</code></pre>

<p>Output:</p>

<hr />

<p>or</p>

<hr />

<p>Make sure you have a blank line above the dashes, though, or else:</p>

<h2>you will get a header</h2>

<hr />

<h2><a name='images'></a>Images</h2>

<p>To include an image, just put a &ldquo;!&rdquo; in front of a text link:</p>

<pre><code>![alternate text](https://sourceforge.net/images/icon_linux.gif)
</code></pre>

<p>You can also use a title if you want, like this:</p>

<pre><code>![tiny arrow](https://sourceforge.net/images/icon_linux.gif "tiny arrow")
</code></pre>

<p>Output:</p>

<blockquote><p><img src="https://sourceforge.net/images/icon_linux.gif" alt="alternate text" />
The &ldquo;alternate text&rdquo; will show up if the browser can&rsquo;t load the image.</p></blockquote>

<p>You can also use a title if you want, like this:</p>

<blockquote><p><img src="https://sourceforge.net/images/icon_linux.gif" title="tiny arrow" alt="tiny arrow" /></p></blockquote>

<p>Some other features like macro is not covered here since not support in my lib.</p>

<p>What if you want to just show asterisks, not italics?</p>

<pre><code>* this shows up in italics: *a happy day*  
* this shows the asterisks: *a happy day*
</code></pre>

<p>Output:</p>

<blockquote><ul>
<li>this shows up in italics: <em>a happy day</em></li>
<li>this shows the asterisks: <em>a happy day</em></li>
</ul>
</blockquote>

<p>What is you want to show the angle brackets <code>"&lt;xxx&gt;"</code>, not for special purposes? This example is newly added.</p>

<pre><code>&lt;b&gt;place `` on the left of the close bracket.&lt;/b&gt;  
&lt;b&gt;place back quotes between the brackets&lt;/b&gt;
</code></pre>

<p>Output:</p>

<blockquote><p><b>xxxx</b><br/>
<b>place back quotes between the brackets</b></p></blockquote>

<p>The backslashes will disappear and leave the asterisks. You can do the same with any of the characters that have a special meaning
for Markdown.</p>

<p>Many simple HTML tags are allowed, for example <code>&lt;b&gt;</code> And unknown tags will be dropped. To show a literal <b> or an unknown tag like <foobar> you need escape it with HTML entities: :</p>

<pre><code>&lt;b&gt;this will be bold&lt;/b&gt;  
you should escape &lt;unknown&gt; tags  
</code></pre>

<p>Output:</p>

<blockquote><p><b>this will be bold</b><br/>
you should escape <unknown> tags</p></blockquote>

<p>HTML tags that are block-level like <div> can be used, but if there is markdown formatting within it, you must add a &ldquo;markdown&rdquo; attribute: <code>&lt;div markdown&gt;</code> Some safe attributes are also allowed, permitting basic styling and layout: <div markdown style="float:left"></p>

<p>Individual ampersands (&amp;) and less-than signs (&lt;) are fine, they will be shown as expected.</p>

<hr />

<h2><a name='table_of_contents'></a>Table of Contents</h2>

<p>You can display a list of links to jump to headers in a document. Sub-headers will be nested.</p>

<p>[TOC]</p>

<pre><code># Section 1  
## Sub-section 1  
# Section 2  
</code></pre>

<p>Output:</p>

<blockquote><h1>Section 1</h1>

<h2>Sub-section 1</h2>

<h1>Section 2</h1></blockquote>

<hr />

<h2><a name='code_highlighting'></a>Code Highlighting</h2>

<p>The code highlighting syntax uses CodeHilite and is colored with Pygments. It follows the same syntax as regular Markdown code blocks, except that there are two ways to tell the highlighter what language to use for the code block.</p>

<p>If the first line of the codeblock contains a shebang, the language is derived from that and line numbers are used(actually not).</p>

<pre><code>#!/usr/bin/python  
# Code goes here ...
</code></pre>

<p>Output:</p>

<blockquote><h1>!/usr/bin/python</h1>

<h1>Code goes here &hellip;</h1></blockquote>

<p>If the first line contains a shebang, but the shebang line does not contain a path (a single / or even a space) or If the first line begins with three or more colons, the text following the colons identifies the language. In both cases, the first line is removed from the code block before processing.</p>

<pre><code>:::python  
# Code goes here ...
</code></pre>

<p>Output:</p>

<blockquote><p>:::python</p>

<h1>Code goes here &hellip;</h1></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Basic Practical Usage of JDBC API]]></title>
    <link href="http://www.iovi.com/blog/2013/10/31/basic-practical-usage-of-jdbc-api/"/>
    <updated>2013-10-31T14:54:53+08:00</updated>
    <id>http://www.iovi.com/blog/2013/10/31/basic-practical-usage-of-jdbc-api</id>
    <content type="html"><![CDATA[<p>The first version is completed on 2013.10.22 20:38, the main content is from <strong><em><a href="http://alumnus.caltech.edu/~chamness/JDBC_Tuning.pdf">here</a></em></strong>, thanks to the origin author Mark Chamness.</p>

<p>This post is dedicated to illustrate techniques for optimizing JDBC API-based calls from the Java platform. As a result of this presentation, you will:</p>

<ul>
<li>Design better JDBC implementations</li>
<li>Recognize potential performance bottlenecks</li>
<li>Reduce cost during development</li>
</ul>


<h2>Agenda</h2>

<ol>
<li><a href="#why">Why optimize?</a></li>
<li><a href="api_tech">Basic API techniques.</a></li>
<li><a href="design_tech">Basic Design Techniques.</a></li>
<li><a href="strategies">Design Strategies.</a></li>
</ol>


<h2><a name='why'></a>Why Optimize?</h2>

<ul>
<li>On average, a web request performs 4 database queries.</li>
<li>Experience has shown that database calls are typical performance bottleneck.</li>
<li>Bad JDBC can overwhelm the database.</li>
</ul>


<!-- more -->


<p><a name='api_tech'></a>##Basic API techniques</p>

<p><img src="http://www.iovi.com/images/upload/most_versatile_most_optimized.png" alt="most_versatile_most_optimized" /></p>

<h3>SQL Statements</h3>

<ul>
<li>Most flexible</li>
<li>Least reliable</li>
<li>Must be recompiled in database for each use</li>
</ul>


<h4>PreparedStatement</h4>

<ul>
<li>Represents a precompiled SQL statement</li>
<li>Can be used to efficiently execute statement multiple times</li>
<li>Somewhat flexible - can create new ones as needed</li>
</ul>


<h3>CallableStatement</h3>

<ul>
<li>Used to execute SQL stored procedures.</li>
<li>Same syntax as PreparedStatement.</li>
<li>Least flexible.</li>
<li>Most optimized DB call.</li>
</ul>


<h3>Cache</h3>

<p>Keep data within client to reduce the number of round-trips to the database.<br/>
Lesson: The less JDBC the better.</p>

<h2><a name='design_tech'></a>Basic Design Techniques</h2>

<h3>Use Database Connection Pool</h3>

<ul>
<li>Necessity for any production system.</li>
<li>Don&rsquo;t use DriverManager.getConnection() often. JDBC connections can take 0.5 to 2 seconds to create.</li>
<li>Create Pool of Connections and reuse them.</li>
</ul>


<h3>Use multi-threading with Connection Pooling to address network latency</h3>

<p>Threads can issue queries over separate database connections. This improves performance to a point.</p>

<pre><code>Single-batch Transactions
    BEGIN TRANSACTION
        UPDATE TABLE1... 
        INSERT INTO TABLE2...
        DELETE TABLE3
    COMMIT
</code></pre>

<h3>Single-batch Transactions&mdash;-Significantly different effects!</h3>

<ul>
<li>DB obtains necessary locks on rows and tables, uses and releases them in one step</li>
<li>Depending on transaction type, separate statements and commits can result in more DB calls and hold DB locks longer</li>
</ul>


<h3>Don&rsquo;t have transaction span user input</h3>

<p>Application sends BEGIN TRAN and SQL, locking rows or tables for update
Application waits for user to press key before committing transaction</p>

<h4>Solution: Optimistic locking</h4>

<ol>
<li>Optimistic locking employs timestamps and triggers in queries and updates</li>
<li>Queries select data with timestamp value</li>
<li>Prepare a transaction based on that value, without locking data in a transaction</li>
<li>If that value changed, this update is invalid and you should query again</li>
</ol>


<h3>Smart Queries</h3>

<ul>
<li>Make queries as specific as possible</li>
<li>Put more logic into SQL statements</li>
<li>DB are designed to use SQL efficiently</li>
<li>Proper use of SQL can avoid performance problems</li>
</ul>


<p>Smart Query Ex: get employees in ENG dept, Instead of:</p>

<pre><code>SELECT * FROM employees; 
SELECT * FROM dept;
</code></pre>

<p>(and joining on Java application side), <strong>use database join:</strong></p>

<pre><code>SELECT employees.* FROM employees E, dept D 
WHERE E.DEPTNO = D.DEPTNO AND D.DEPTTYPE = 'ENG';
</code></pre>

<p>Minimize ResultSet before crossing network
Many performance problems come from moving raw data around needlessly</p>

<h3>Smart Query Guidelines</h3>

<ul>
<li>Use DB for filtering</li>
<li>Use Java for business logic</li>
<li>DB does filtering very well</li>
<li>DB business logic is poor(At least very inconsistent between database vendors.)</li>
</ul>


<h3>Keep operational data set small as possible</h3>

<ul>
<li>Move non-current data to other tables and do joins for rarer historical queries</li>
<li>Otherwise, index and cluster so frequently used data is logically and physically localized</li>
</ul>


<h2><a name='strategies'></a>Optimization Stategies</h2>

<ol>
<li>Leverage the strengths of the DB</li>
<li>Use the full range of java.sql API</li>
<li>Design for Performance - Connection Pools, Multi-Threading, etc.</li>
</ol>


<h2>References:</h2>

<ul>
<li><a href="http://www.tutorialspoint.com/jdbc/jdbc-driver-types.htm">jdbc driver types</a></li>
<li><a href="https://access.redhat.com/site/documentation/en-US/JBoss_Enterprise_Data_Services/5/html/Data_Services_Client_Developer_Guide/chap-JDBC_Transactions.html">JDBC Transactions</a></li>
<li><a href="http://www-01.ibm.com/software/webservers/appserv/ws_bestpractices.pdf">WebSphere Application Server Development Best Practices for Performance and Scalability</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Short List of MySQL Commands]]></title>
    <link href="http://www.iovi.com/blog/2013/09/06/short-list-of-mysql-commands/"/>
    <updated>2013-09-06T14:50:01+08:00</updated>
    <id>http://www.iovi.com/blog/2013/09/06/short-list-of-mysql-commands</id>
    <content type="html"><![CDATA[<ul>
<li><p>The first version is completed on 2013.12.22 21:38, the main content is from <strong><em><a href="http://www.bios.niu.edu/johns/bioinform/mysql_commands.htm">here</a></em></strong>, thanks to the origin author.</p></li>
<li><p>The second version is updated on 2013.12.27 8:59, Backup tool is added, the complementary part is mainly from <strong><em><a href="http://webcheatsheet.com/sql/mysql_backup_restore.php">here</a></em></strong>, thanks to the origin author.</p></li>
</ul>


<h2>Conventions used here:</h2>

<ul>
<li>MySQL keywords are shown in CAPS</li>
<li>User-specified names are in small letters</li>
<li>Optional items are enclosed in square brackets [ ]</li>
<li>Items in parentheses must appear in the command, along with the parentheses</li>
<li>Items that can be repeated as often as desired are indicated by an ellipsis &hellip;</li>
</ul>


<h2>Quoting in MySQL Statements</h2>

<ul>
<li>Don&rsquo;t quote database, table, or column names</li>
<li>Don&rsquo;t quote column types or modifiers</li>
<li>Don&rsquo;t quote numerical values</li>
<li>Quote (single or double) non-numeric values</li>
<li>Quote file names and passwords</li>
<li>Usernames are NOT quoted in GRANT or REVOKE statements, but they are quoted in other statements.</li>
</ul>


<h2>General Commands</h2>

<ul>
<li><code>USE database_name</code></li>
</ul>


<p>Change to specific database. You need to change to some database when you first connect to MySQL.</p>

<ul>
<li><code>SHOW DATABASES</code></li>
</ul>


<p>Lists all MySQL databases on the system.</p>

<ul>
<li><code>SHOW TABLES [FROM database_name]</code></li>
</ul>


<p>Lists all tables from the current database or from the database given in the command.</p>

<ul>
<li><code>DESCRIBE table_name</code>;<code>SHOW FIELDS FROM table_name</code>;<code>SHOW COLUMNS FROM table_name</code></li>
</ul>


<p>These commands all give a list of all columns (fields) from the given table, along with column type and other info.</p>

<ul>
<li><code>SHOW INDEX FROM table_name</code></li>
</ul>


<p>Lists all indexes from this tables.</p>

<ul>
<li><code>SET PASSWORD=PASSWORD('new_password')</code></li>
</ul>


<p>Allows the user to set his/her own password.</p>

<h2>Table Commands</h2>

<ul>
<li><code>CREATE TABLE table_name (create_clause1, create_clause2, ...)</code></li>
<li>Creates a table with columns as indicated in the create clauses.</li>
<li>create_clause: column name followed by column type, followed optionally by modifiers. For example, &ldquo;gene_id INT         AUTO_INCREMENT PRIMARY KEY&rdquo; (without the quotes) creates a column of type integer with the modifiers described below.</li>
<li><p>create_clause modifiers</p>

<ul>
<li> AUTO_INCREMENT : each data record is assigned the next sequential number when it is given a NULL value.</li>
<li> PRIMARY KEY : Items in this column have unique names, and the table is indexed automatically based on this column. One column must be the PRIMARY KEY, and only one column may be the PRIMARY KEY. This column should also be NOT NULL.</li>
<li> NOT NULL : No NULL values are allowed in this column: a NULL generates an error message as the data is inserted into the table.</li>
<li> DEFAULT value : If a NULL value is used in the data for this column, the default value is entered instead.</li>
</ul>
</li>
<li><p><code>DROP TABLE table_name</code></p></li>
</ul>


<p>Removes the table from the database. Permanently! So be careful with this command!</p>

<ul>
<li><code>ALTER TABLE table_name ADD (create_clause1, create_clause2, ...)</code></li>
</ul>


<p>Adds the listed columns to the table.</p>

<ul>
<li><code>ALTER TABLE table_name DROP column_name</code></li>
</ul>


<p>Drops the listed columns from the table.</p>

<ul>
<li><code>ALTER TABLE table_name MODIFY create_clause</code></li>
</ul>


<p>Changes the type or modifiers to a column. Using MODIFY means that the column keeps the same name even though its type is altered. MySQL attempts to convert the data to match the new type: this can cause problems.</p>

<ul>
<li><code>ALTER TABLE table_name CHANGE column_name create_clause</code></li>
</ul>


<p>Changes the name and type or modifiers of a column. Using CHANGE (instead of MODIFY) implies that the column is getting a new name.</p>

<ul>
<li><code>ALTER TABLE table_name ADD INDEX [index_name] (column_name1, column_name2, ...)</code> or
<code>CREATE INDEX index_name ON table_name (column_name1, column_name2, ...)</code></li>
</ul>


<p>Adds an index to this table, based on the listed columns. Note that the order of the columns is important, because additional indexes are created from all subsets of the listed columns reading from left to write. The index name is optional if you use ALTER TABLE, but it is necesary if you use CREATE INDEX. Rarely is the name of an index useful (in my experience).</p>

<h2>Data Commands</h2>

<ul>
<li><code>INSERT [INTO] table_name VALUES (value1, value2, ...)</code></li>
</ul>


<p>Insert a complete row of data, giving a value (or NULL) for every column in the proper order.</p>

<ul>
<li><code>INSERT [INTO] table_name (column_name1, column_name2, ...) VALUES (value1, value2, ...)</code> or
<code>INSERT [INTO] table_name SET column_name1=value1, column_name2=value2, ...</code></li>
</ul>


<p>Insert data into the listed columns only. Alternate forms, with the SET form showing column assignments more explicitly.</p>

<ul>
<li><code>INSERT [INTO] table_name (column_name1, column_name2, ...) SELECT list_of_fields_from_another_table FROM other_table_name WHERE where_clause</code></li>
</ul>


<p>Inserts the data resulting from a SELECT statement into the listed columns. Be sure the number of items taken from the old table match the number of columns they are put into!</p>

<ul>
<li><code>DELETE FROM table_name WHERE where_clause</code></li>
</ul>


<p>Delete rows that meet the conditions of the where_clause. If the WHERE statement is omitted, the table is emptied, although its structure remains intact.</p>

<ul>
<li><code>UPDATE table_name SET column_name1=value1, column_name2=value2, ... [WHERE where_clause]</code></li>
</ul>


<p>Alters the data within a column based on the conditions in the where_clause.</p>

<ul>
<li><code>LOAD DATA LOCAL INFILE 'path to external file' INTO TABLE table_name</code></li>
</ul>


<p>Loads data from the listed file into the table. The default assumption is that fields in the file are separated by tabs, and each data record is separated from the others by a newline. It also assumes that nothing is quoted: quote marks are considered to be part of the data. Also, it assumes that the number of data fields matches the number of table columns. Columns that are AUTO_INCREMENT should have NULL as their value in the file.</p>

<ul>
<li><code>LOAD DATA LOCAL INFILE 'path to external file' [FIELDS TERMINATED BY 'termination_character'] [FIELDS ENCLOSED BY 'quoting character'] [LINES TERMINATED BY 'line termination character'] FROM table_name</code></li>
</ul>


<p>Loads data from the listed file into the table, using the field termination character listed (default is tab \t), and/or the listed quoting character (default is nothing), and/or the listed line termination chacracter (default is a newline \n).</p>

<ul>
<li><code>SELECT column_name1, column_name2, ... INTO OUTFILE 'path to external file' [FIELDS TERMINATED BY 'termination_character'] [FIELDS ENCLOSED BY 'quoting character'] [LINES TERMINATED BY 'line termination character'] FROM table_name [WHERE where_clause]</code></li>
</ul>


<p>Allows you to move data from a table into an external file. The field and line termination clauses are the same as for LOAD above. Several tricky features:</p>

<ol>
<li>Note the positions of the table_name and where_clause, after the external file is given.</li>
<li>You must use a complete path, not just a file name. Otherwise MySQL attempts to write to the directory where the database is stored, where you don&rsquo;t have permission to write.</li>
<li>The user who is writing the file is &lsquo;mysql&rsquo;, not you! This means that user &lsquo;mysql&rsquo; needs permission to write to the directory you specify. The best way to do that is to creat a new directory under your home directory, then change the directory&rsquo;s permission to 777, then write to it. For example: mkdir mysql_output, chmod 777 mysql_output.</li>
</ol>


<h2>Privilege Commands</h2>

<p>Most of the commands below require MySQL root access</p>

<ul>
<li><code>GRANT USAGE ON *.* TO user_name@localhost [IDENTIFIED BY 'password']</code></li>
</ul>


<p>Creates a new user on MySQL, with no rights to do anything. The IDENTIFED BY clause creates or changes the MySQL password, which is not necessarily the same as the user&rsquo;s system password. The @localhost after the user name allows usage on the local system, which is usually what we do; leaving this off allows the user to access the database from another system. User name NOT in quotes.</p>

<ul>
<li><code>GRANT SELECT ON *.* TO user_name@localhost</code></li>
</ul>


<p>In general, unless data is supposed to be kept private, all users should be able to view it. A debatable point, and most databases will only grant SELECT privileges on particular databases. There is no way to grant privileges on all databses EXCEPT specifically enumerated ones.</p>

<ul>
<li><code>GRANT ALL ON database_name.* TO user_name@localhost</code></li>
</ul>


<p>Grants permissions on all tables for a specific database (database_name.*) to a user. Permissions are for: ALTER, CREATE, DELETE, DROP, INDEX, INSERT, SELECT, UPDATE.</p>

<ul>
<li><code>FLUSH PRIVILEGES</code></li>
</ul>


<p>Needed to get updated privileges to work immediately. You need RELOAD privileges to get this to work.</p>

<ul>
<li><code>SET PASSWORD=PASSWORD('new_password')</code></li>
</ul>


<p>Allows the user to set his/her own password.</p>

<ul>
<li><code>REVOKE ALL ON [database_name.]* FROM user_name@localhost</code></li>
</ul>


<p>Revokes all permissions for the user, but leaves the user in the MySQL database. This can be done for all databases using &ldquo;ON *&rdquo;, or for all tables within a specific databse, using &ldquo;ON database_name.*&rdquo;.</p>

<ul>
<li><code>DELETE FROM mysql.user WHERE user='user_name@localhost'</code></li>
</ul>


<p>Removes the user from the database, which revokes all privileges. Note that the user name is in quotes here.</p>

<ul>
<li><code>UPDATE mysql.user SET password=PASSWORD('my_password') WHERE user='user_name'</code></li>
</ul>


<p>Sets the user&rsquo;s password. The PASSWORD function encrypts it; otherwise it will be in plain text.</p>

<ul>
<li><code>SELECT user, host, password, select_priv, insert_priv, shutdown_priv, grant_priv FROM mysql.user</code></li>
</ul>


<p>A good view of all users and their approximate privileges. If there is a password, it will by an encrytped string; if not, this field is blank. Select is a very general privlege; insert allows table manipulation within a database; shutdown allows major system changes, and should only be usable by root; the ability to grant permissions is separate from the others.</p>

<ul>
<li><code>SELECT user, host, db, select_priv, insert_priv, grant_priv FROM mysql.db</code></li>
</ul>


<p>View permissions for individual databases.</p>

<h2>Backup Tool</h2>

<p>Back up From the Command Line (using mysqldump)
If you have shell or telnet access to your web server, you can backup your MySQL data by using the mysqldump command. This command connects to the MySQL server and creates an SQL dump file. The dump file contains the SQL statements necessary to re-create the database. Here is the proper syntax:</p>

<ul>
<li><code>mysqldump --opt -u [uname] -p[pass] [dbname] &gt; [backupfile.sql]</code></li>
</ul>


<p>mysqldump -u root -p Tutorials > tut_backup.sql
This command will backup the &lsquo;Tutorials&rsquo; database into a file called tut_backup.sql which will contain all the SQL statements needed to re-create the database.</p>

<p>mysqldump -u root -p Tutorials php_tutorials asp_tutorials > tut_backup.sql
With mysqldump command you can specify certain tables of your database you want to backup. For example, to back up only php_tutorials and asp_tutorials tables from the &lsquo;Tutorials&rsquo; database accomplish the command below. Each table name has to be separated by space.</p>

<p>mysqldump -u root -p &mdash;databases Tutorials Articles Comments > content_backup.sql
Sometimes it is necessary to back up more that one database at once. In this case you can use the &mdash;database option followed by the list of databases you would like to backup. Each database name has to be separated by space.</p>

<p>$ mysqldump -u root -p &mdash;all-databases > alldb_backup.sql
If you want to back up all the databases in the server at one time you should use the &mdash;all-databases option. It tells MySQL to dump all the databases it has in storage.</p>

<p>The mysqldump command has also some other useful options:</p>

<p>&mdash;add-drop-table: Tells MySQL to add a DROP TABLE statement before each CREATE TABLE in the dump.</p>

<p>&mdash;no-data: Dumps only the database structure, not the contents.</p>

<p>&mdash;add-locks: Adds the LOCK TABLES and UNLOCK TABLES statements you can see in the dump file.</p>

<p>The mysqldump command has advantages and disadvantages. The advantages of using mysqldump are that it is simple to use and it takes care of table locking issues for you. The disadvantage is that the command locks tables. If the size of your tables is very big mysqldump can lock out users for a long period of time.</p>

<p>Back up your MySQL Database with Compress
mysqldump -u [uname] -p[pass] [dbname] | gzip -9 > [backupfile.sql.gz]
If your mysql database is very big, you might want to compress the output of mysqldump. Just use the mysql backup command below and pipe the output to gzip, then you will get the output as gzip file.</p>

<p>gunzip [backupfile.sql.gz]
If you want to extract the .gz file, use the command above:</p>

<p>Restoring your MySQL Database
Above we backup the Tutorials database into tut_backup.sql file. To re-create the Tutorials database you should follow two steps:</p>

<p>Create an appropriately named database on the target machine
Load the file using the mysql command:
$ mysql -u [uname] -p[pass] [db_to_restore] &lt; [backupfile.sql]
Have a look how you can restore your tut_backup.sql file to the Tutorials database.</p>

<p>$ mysql -u root -p Tutorials &lt; tut_backup.sql
To restore compressed backup files you can do the following:</p>

<p>gunzip &lt; [backupfile.sql.gz] | mysql -u [uname] -p[pass] [dbname]
If you need to restore a database that already exists, you&rsquo;ll need to use mysqlimport command. The syntax for mysqlimport is as follows:</p>

<p>mysqlimport -u [uname] -p[pass] [dbname] [backupfile.sql]</p>

<h2>Operations over Web with PHPMyAdmin</h2>

<p>It is assumed that you have phpMyAdmin installed since a lot of web service providers use it. To backup your MySQL database using PHPMyAdmin just follow a couple of steps:</p>

<p>Open phpMyAdmin.
Select your database by clicking the database name in the list on the left of the screen.
Click the Export link. This should bring up a new screen that says View dump of database (or something similar).
In the Export area, click the Select All link to choose all of the tables in your database.
In the SQL options area, click the right options.
Click on the Save as file option and the corresponding compression option and then click the &lsquo;Go&rsquo; button. A dialog box should appear prompting you to save the file locally.
Restoring your database is easy as well as backing it up. Make the following:</p>

<p>Open phpMyAdmin.
Create an appropriately named database and select it by clicking the database name in the list on the left of the screen. If you would like to rewrite the backup over an existing database then click on the database name, select all the check boxes next to the table names and select Drop to delete all existing tables in the database.
Click the SQL link. This should bring up a new screen where you can either type in SQL commands, or upload your SQL file.
Use the browse button to find the database file.
Click Go button. This will upload the backup, execute the SQL commands and re-create your database.</p>
]]></content>
  </entry>
  
</feed>
